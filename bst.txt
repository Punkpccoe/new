#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* left;
struct Node* right;
};
struct Node* createNode(int value) {
struct Node* newNode = (struct
Node*)malloc(sizeof(struct
Node));
newNode->data = value;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
struct Node* insert(struct Node* root, int value) {
if (root == NULL) {
return createNode(value);
}
if (value < root->data) {
root->left = insert(root->left, value); }
else if (value > root->data) {
root->right = insert(root->right, value); }
return root;
}
struct Node* minValueNode(struct Node* node) {
struct Node* current = node;
while (current && current->left != NULL) {
current = current->left;
}
return current;
}
struct Node* deleteNode(struct Node* root, int value)
{
if (root == NULL) {
return root;
}
if (value < root->data) {
root->left = deleteNode(root->left, value); }
else if (value > root->data) {
root->right = deleteNode(root->right, value); }
else {
if (root->left == NULL) {
struct Node* temp = root->right;
free(root);
return temp;
} else if (root->right == NULL) {
struct Node* temp = root->left;
free(root);
return temp;
}
struct Node* temp = minValueNode(root->right);
root->data = temp->data;
root->right = deleteNode(root->right, temp-
>data);
}
return root;
}
struct Node* search(struct Node* root, int value) {
if (root == NULL || root->data == value) { return
root;
}
if (value < root->data) {
return search(root->left, value); }
return search(root->right, value); }
void mirrorImage(struct Node* node) {
if (node == NULL) {
return;
} else {
struct Node* temp;
mirrorImage(node->left);
mirrorImage(node->right);
temp = node->left;
node->left = node->right;
node->right = temp;
}
}
void displayTree(struct Node* root) {
if (root != NULL) {
displayTree(root->left);
printf("%d "
, root->data);
displayTree(root->right);
}
}
int height(struct Node* node) {
if (node == NULL) {
return 0;
} else {
int left_height = height(node->left); int
right_height = height(node->right);
if (left_height > right_height) {
return (left_height + 1);
} else {
return (right_height + 1);
}
}
}
void printGivenLevel(struct Node* root, int level) {
if (root == NULL) {
return;
}
if (level == 1) {
printf("%d "
, root->data);
} else if (level > 1) {
printGivenLevel(root->left, level - 1);
printGivenLevel(root->right, level - 1); }
}
void displayLevelWise(struct Node* root) {
int h = height(root);
int i;
for (i = 1; i <= h; i++) {
printf("Level %d: "
, i);
printGivenLevel(root, i);
printf("\n");
}
}
int main() {
struct Node* root = NULL;
int choice, value, found;
do {
printf("\nChoose an option:\n");
printf("1. Insert\n");
printf("2. Delete\n");
printf("3. Search\n");
printf("4. Mirror Image\n"); printf("5.
Display Tree (Inorder)\n"); printf("6.
Display Tree Level-Wise\n");
printf("7. Exit\n");
printf("Enter your choice: ");
scanf("%d"
, &choice);
switch (choice) {
case 1:
printf("Enter value to insert: ");
scanf("%d"
, &value);
root = insert(root, value); break;
case 2:
printf("Enter value to delete: ");
scanf("%d"
, &value);
root = deleteNode(root, value); break;
case 3:
printf("Enter value to search: ");
scanf("%d"
, &value);
found = search(root, value) != NULL; if
(found) {
printf("Value found in the tree\n"); } else {
printf("Value not found in the tree\n"); }
break;
case 4:
mirrorImage(root);
printf("Mirror image created\n"); break;
case 5:
printf("BST (Inorder Traversal): ");
displayTree(root);
printf("\n");
break;
case 6:
printf("BST Level-Wise Display:\n");
displayLevelWise(root);
break;
case 7:
printf("Exiting...\n");
break;
default:
printf("Invalid choice\n"); }
} while (choice != 7);
return 0;
}
Output:
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 1
Enter value to insert: 5
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 1
Enter value to insert:
4 Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 1
Enter value to insert:
6
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 1
Enter value to insert:
3 Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 1
Enter value to insert:
7
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 5
BST (Inorder Traversal): 3 4 5 6 7
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 4
Mirror image created
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 5
BST (Inorder Traversal): 7 6 5 4 3
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise
7. Exit
Enter your choice: 4
Mirror image
created
Choose an option:
1. Insert
2. Delete
3. Search
4. Mirror Image
5. Display Tree (Inorder)
6. Display Tree Level-Wise